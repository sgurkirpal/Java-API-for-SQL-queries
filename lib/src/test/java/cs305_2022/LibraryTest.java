/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cs305_2022;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.xml.sax.SAXException;

import javax.xml.parsers.ParserConfigurationException;

import static org.junit.jupiter.api.Assertions.*;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.*;

class LibraryTest {
    public static class selectOneClass{
        String propZ="2";
        String propY="NICK";
        Integer propA=47;
        Short insertID=201;
        String insertName="gurkirpal";
        Long deleteID= 301L;
        String deleteName="gps";
        String deleteLastName="ABC";
    }

    /*
        public static class insertClass{
        int propX=1001;
        String propY="singh";
    }

    public static class updateClass{
        int propA=1528;
    }

    public static class bigone {
        int film_id;
        String title;
        String description;
        String name;
        Object rental_rate;
        int length;
        String rating;
        String actors;
    }

     */

    public static class Actor{
        int actor_id;
        String first_name;
        String last_name;
        Timestamp last_update;
    }

    public static class errorClass{

    }
    static selectOneClass selectOneParam=new selectOneClass();
//    static insertClass insertpara=new insertClass();
//    static updateClass updatepara=new updateClass();
//    static bigone big=new bigone();

    Library lib;

    @BeforeEach
    void setUp() throws ParserConfigurationException, IOException, SAXException {
        this.lib=new Library();
        lib.main.setup_connection("jdbc:mysql://localhost/sakila?" +
                "user=gurkirpal&password=snny");
        lib.main.setup_connection("jdbc:mysql://localhost/sakila?" +
                "user=gurkirpal&password=snnysng8");
    }

    @Test void selectOne() throws InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {
        Actor act=new Actor();
        act=(Actor) lib.selectOne("selectOne",selectOneParam,Actor.class);
        assertThrows(RuntimeException.class,()->lib.selectOne("updateone",selectOneParam,Actor.class));
        lib.selectOne("selectOne",selectOneParam,errorClass.class);
        assertEquals(act.last_name,"WAHLBERG");
        lib.selectOne("manyselect",selectOneParam,Actor.class);
        lib.selectOne("wrong",selectOneParam,Actor.class);
        assertThrows(RuntimeException.class,()->lib.selectOne("wrongParam",selectOneParam,Actor.class));
    }

    @Test void selectMany() throws InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {
        List<?> lis=new ArrayList<>();
        lis=  lib.selectMany("manyselect",selectOneParam,Actor.class);
        lib.selectMany("manyselect",selectOneParam,errorClass.class);
        assertThrows(RuntimeException.class,()->lib.selectMany("updateone",selectOneParam,Actor.class));
        assertEquals(lis.size(),3);
        lib.selectMany("wrong",selectOneParam,Actor.class);
        assertThrows(RuntimeException.class,()->lib.selectMany("wrongParam",selectOneParam,Actor.class));
    }

    @Test void update() throws InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {
        lib.update("updateone",selectOneParam);
        Actor act=new Actor();
        act=(Actor) lib.selectOne("selectAfterUpdate", "47",Actor.class);
        assertEquals(act.first_name,"JULIE");
    }

    @Test void insert() throws InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {
        lib.insert("insertActor",selectOneParam);
        Actor act=new Actor();
        lib.insert("selectOne",selectOneParam);
        act=(Actor) lib.selectOne("selectAfterInsert",selectOneParam,Actor.class);
        assertEquals(act.first_name,"gurkirpal");
    }


    @Test void delete() throws InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {
        lib.insert("insertBeforeDelete",selectOneParam);
        lib.delete("deleteone",new int[]{301});
        lib.delete("selectOne",selectOneParam);
        assertThrows(RuntimeException.class,()->lib.delete("noSuchRowDelete",selectOneParam));
        Actor act=new Actor();
        act=(Actor) lib.selectOne("selectAfterDelete",selectOneParam,Actor.class);
        assertNull(act);
    }

    @AfterEach
    void tearDown() throws SQLException {
        if(lib.main.rs!=null){
            lib.main.rs.close();
        }
        if(lib.main.stmt!=null){
            lib.main.stmt.close();
        }
        if(lib.main.conn!=null){
            lib.main.conn.close();
        }
    }

}
